# GICOSH - Git Command Shortcuts for Lazy Developers
# From Marcos Rocha - http://marcosrocha.net/
# First of all, our auxiliar functions
git_add() {
	git add $@
}

git_branch() {
	git branch $@
}

git_commit_error() {
	echo "You should type a comment."
	echo ""
	echo "Ex:"
	echo "  gc \"Added support for linux and mac\""
	echo "or"
	echo "  gc Added support for linux and mac"
}

git_commit() {
	comment=$@
	if [ -z "$comment" ]
	then
		git_commit_error
		return
	fi

	git commit -m "$comment"
}
git_clone() {
	git clone $@
}

git_clean() {
	git clean $@
}

git_diff() {
	git diff $@
}

git_diff_tool() {
	git difftool $@
}

git_fetch() {
	git fetch $@
}

git_log() {
	git log $@
}

git_merge() {
	git merge $@
}

git_merge_tool() {
	git mergetool $@
}

git_checkout() {
	git checkout $@
}

git_pull() {
	git pull $@
}

git_push() {
    if [[ $1 == "-p" ]]; then
        echo "GICOSH is pulling first"
        git_pull
        shift
    fi

    local remote="${1:-origin}"
    local branch="${2:-$(git rev-parse --abbrev-ref HEAD)}"

    if ! git rev-parse --abbrev-ref --symbolic-full-name "${branch}@{u}" > /dev/null 2>&1; then
        echo -e "\e[33mUpstream n√£o configurado para o branch '\e[34m$branch\e[33m'. Configurando com: \e[34m$remote/$branch\e[33m\e[0m"
        git push --set-upstream "$remote" "$branch"
    else
        git push
    fi
}

git_reset_head() {
	git reset HEAD $@
}

git_rebase() {
	git rebase $@
}

git_rm() {
	git rm $@
}

git_status() {
	git status $@
}

git_stash() {
	git stash $@
}

git_submodule_update_help() {
	echo "GSU (Git Submodule Update) - Updates all submodules"
	echo "Usage:"
	echo "  gsu [-r]"
	echo ""
	echo "Where:"
	echo "  -r  Tells GSU to execute --remote --rebase of"
	echo "      git submodule parameters"
}

git_submodule_update() {
	if [[ $1 == "-?" ]]
  then
  	git_submodule_update_help
		return
  fi

  echo "Updating submodules..."
  git submodule update
	if [[ $1 == "-r" ]]
  then
  	echo "Rebasing submodules..."
  	git submodule update --remote --rebase
  fi
}

git_submodule_init_help() {
	echo "GSI (Git Submodule Init) - Initializes all submodules"
	echo "Usage:"
	echo "  gsi [-u] [-r]"
	echo ""
	echo "Where:"
	echo "  -u  Is an optional parameter to immediately call GSU after a"
	echo "      submodule initialization."
	echo "  -r  Tells GSU to execute --remote --rebase parameters"
}

git_submodule_init() {
	if [[ $1 == "-?" ]]
	then
		git_submodule_init_help
		return
	fi
	echo "GICOSH is initializing submodules..."
	git submodule init
	if [[ $1 == "-u" ]]
	then
		git_submodule_update ${@:2}
	fi
}

git_tag() {
	git tag $@
}

git_gui() {
	git gui $@ &
}

show_git_aliases() {
    awk -F '=' '/^alias/ {
        alias_name = substr($1, 7);
        if (substr($2,1,1)=="\"" || substr($2,1,1)=="\047") {
            q = substr($2,1,1);
            if (substr($2, length($2), 1) == q)
                command = substr($2, 2, length($2)-2);
            else
                command = substr($2, 2);
        } else {
            command = $2;
        }
        printf "\033[32m%-20s\033[0m \033[34m%s\033[0m\n", alias_name, command;
    }' ~/.bash_aliases_gicosh
}
# Now, the aliases
alias show.git.aliases=show_git_aliases
alias ga=git_add
alias gb=git_branch
alias gc=git_commit
alias gcl=git_clone
alias gcln=git_clean
alias gd=git_diff
alias gdtool=git_diff_tool
alias gf=git_fetch
alias gfp="git_fetch -p"
alias gl=git_log
alias gm=git_merge
alias gfpp="gfp && gp"
alias gmtool=git_merge_tool
alias go=git_checkout
alias gp=git_pull
alias gpsh=git_push
alias gr=git_reset_head
alias grb=git_rebase
alias grh="git_reset_head --hard"
alias grm=git_rm
alias gs=git_status
alias gsh=git_stash
alias gsi=git_submodule_init
alias gsu=git_submodule_update
alias gt=git_tag
alias gui=git_gui
